
//ts


"React Reducer": {
        "prefix": "reactContext-reducer",
        "body": [
    "",
    "import { ${1:Name}State } from './' ;",
    "",
    "type ${1:Name}ActionType = { type: '[${1:Name}] - ${2:ActionName}' }",    
    "",
    "export const ${1:Name}Reducer = (state: ${1:Name}State, action: ${1:Name}ActionType): ${1:Name}State => {",
    "",
    "    switch (action.type) {",
    "        case '[${1:Name}] - ${2:ActionName}':",
    "            return {",
    "                ...state,",
    "            };",    
    "",
    "        default:",
    "            return state;",
    "    }",
    "",
    "",
    "}",
    
        ],
        "description": "React custom reducer"
    },


/tsx
"React Context": {
	"prefix": "reactContext",
	"body": [
"import { createContext } from 'react';",
"",
 "interface ContextProps {",
"     ${2:prop1}: ${3:boolean};",
"}",
"",
"",
"export const ${1:Name}Context = createContext({} as ContextProps);"
	],
	"description": "Crea un archivo de contexto para React"
},
"React Provider":{
	"prefix": "reactProvider",
    "body": [
"import { FC, useReducer } from 'react'",
"import { ${1:Name}Context } from './${1:Name}Context'",
"import { ${1:Name}Reducer } from './${1:Name}Reducer'",
"",
"export interface ${1:Name}State {",
"    sideMenuOpen: boolean",
"}",
"export const ${1:Name}_initialState: ${1:Name}State = {",
"    sideMenuOpen: false",
"}",
"",
"interface Props${1:Name}Provider {",
"    children: React.ReactNode",
"}",
"",
"  export const ${1:Name}Provider: FC<Props${1:Name}Provider> = ({ children }) => {",
"    const [state, dispatch] = useReducer(${1:Name}Reducer, ${1:Name}_initialState)",
"",
"   return (",
"        <${1:Name}Context.Provider value={{ sideMenuOpen: false }}>",
"        {children}",
"        </${1:Name}Context.Provider>",
    ")",
"}"

	]	
}